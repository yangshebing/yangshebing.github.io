<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | 杨社兵的技术博客]]></title>
  <link href="http://yangshebing.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://yangshebing.github.io/"/>
  <updated>2016-01-04T21:27:24+08:00</updated>
  <id>http://yangshebing.github.io/</id>
  <author>
    <name><![CDATA[杨社兵]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift中UITableView的用法(自定义UITableView和UITableViewCell)]]></title>
    <link href="http://yangshebing.github.io/blog/2016/01/04/swiftzhong-uitableviewde-yong-fa-zi-ding-yi-uitableviewhe-uitableviewcell/"/>
    <updated>2016-01-04T21:23:33+08:00</updated>
    <id>http://yangshebing.github.io/blog/2016/01/04/swiftzhong-uitableviewde-yong-fa-zi-ding-yi-uitableviewhe-uitableviewcell</id>
    <content type="html"><![CDATA[<p>一、自定义表视图（UITableView）</p>

<!--more-->


<pre><code>
import UIKit
class HomeTableView: UITableView, UITableViewDataSource, UITableViewDelegate {
//表视图的数据源：dataList
    var dataList = [AnyObject]()
//单元格的标识符：homeCellId
    let identify = "homeCellId"
    //重写表视图初始化方法
    override init(frame: CGRect, style: UITableViewStyle) {
        super.init(frame:frame, style:style)
        //调用初始化子视图方法
        initSubviews()
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    //初始化表视图的子视图方法
    func initSubviews () {
    //设置数据源代理
        dataSource = self;
   //设置表视图代理
        delegate = self;
        //注册单元格class方式
        registerClass(HomeCell.self, forCellReuseIdentifier: identify)
       //设置表视图的分割线显示风格
        separatorStyle = .None;
        //注册单元格xib方式
        //registerNib(UINib(nibName: "HomeCell", bundle: nil), forCellReuseIdentifier:identify)
    }
   //实现表视图返回组数代理方法：不实现默认为1
    func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {
        return 1;
    }
//实现表视图返回行数代理方法
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        return dataList.count;
    }
    //实现表视图返回单元格代理方法
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
    //取单元格
        let cell = tableView.dequeueReusableCellWithIdentifier(identify) as! HomeCell
        //设置单元格的选中风格
        cell.selectionStyle = .None;
        cell.titleStr = dataList[indexPath.row] as? String
        return cell
    }
    //选中单元格的代理方法
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        print("the indexpath row is \(indexPath.row)")
    }
    //返回单元格高度的代理方法
    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat {
        return 80;
    }
}
</code></pre>

<p>二、自定义单元格（UITableViewCell）</p>

<pre><code>import UIKit

class HomeCell: UITableViewCell {
//定义子视图变量
    var imgView: UIImageView!
    var titleLabel: UILabel!
    var button: UIButton!
    var titleStr: String?
    // 重写单元格初始化方法
    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier);
        //调用单元格初始化方法
        initSubviews()
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:)has not been implemented")
    }

    override func awakeFromNib() {
        super.awakeFromNib()
        // Initialization code
    }
    //单元格子视图初始化方法
    func initSubviews () {
        imgView = UIImageView(frame: CGRectMake(0, 0, 30, 30))
        imgView.image = UIImage(named: "exam.png")
        contentView.addSubview(imgView);

        titleLabel = UILabel(frame: CGRectMake(0, 0, frame.size.width, frame.size.height))
        titleLabel.textAlignment = .Left;
        titleLabel.textColor = UIColor.lightGrayColor();
        titleLabel.font = UIFont.systemFontOfSize(15);
        titleLabel.text = "心灵鸡汤，每天一起干"
        contentView.addSubview(titleLabel)

        button = UIButton(type: .Custom)
        button.frame = CGRectMake(0, 0, frame.size.width, frame.size.height)
        button.setTitle("关注", forState: .Normal)
        button.setTitleColor(UIColor.whiteColor(), forState: .Normal)
        button.backgroundColor = UIColor.grayColor()
        contentView.addSubview(button)
    }
    //重写单元格布局子视图方法
    override func layoutSubviews() {
        super.layoutSubviews()
        titleLabel.text = titleStr
      //...
      //布局单元格子视图
      //...
    override func setSelected(selected: Bool, animated: Bool) {
        super.setSelected(selected, animated: animated)
        // Configure the view for the selected state
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发之基础控件（Swift版）]]></title>
    <link href="http://yangshebing.github.io/blog/2016/01/02/ioskai-fa-zhi-ji-chu-kong-jian-(swiftban-)/"/>
    <updated>2016-01-02T11:08:19+08:00</updated>
    <id>http://yangshebing.github.io/blog/2016/01/02/ioskai-fa-zhi-ji-chu-kong-jian-(swiftban-)</id>
    <content type="html"><![CDATA[<p>  1、文本（UILabel）：</p>

<pre><code>  let titleLabel = UILabel(frame: CGRectMake(0, 0, view.frame.size.width, view.frame.size.height))
        //设置titleLabel的文本对齐方式：左：.Left, 中:.Center, 右:.Right
        titleLabel.textAlignment = .Center
        //设置titleLabel的文本颜色
        titleLabel.textColor = UIColor.lightGrayColor()
        //设置titleLabel文字的字体为系统字体，大小为15
        titleLabel.font = UIFont.systemFontOfSize(15)
        //设置titleLabel文字的字体为"Helvetica", 大小为15
        titleLabel.font = UIFont(name: "Helvetica", size: 15)
        titleLabel.text = "心灵鸡汤，每天一起干"
        //titleLabel字体大小自适应宽度，根据指定宽度titleLabel自动调整字体显示大小
        titleLabel.adjustsFontSizeToFitWidth = true
        //指定titleLabel的显示行数，0代表自动折行
        titleLabel.numberOfLines = 1
        //获取系统所有字体名称
        let fontFamily = UIFont.familyNames()
        print(fontFamily)
        view.addSubview(titleLabel)
</code></pre>

<!--more-->


<p>2、按钮（UIButton）：</p>

<pre><code>//按钮类型：常见的两种如下
         /**
         *.Custom:自定义类型
         *.System:系统类型（iOS7.0）
         **/
        let followButton = UIButton(type: .Custom)
        followButton.frame = CGRectMake(100, 100, 100, 50)
        //设置按钮在特定状态下的文本显示，常见的有：
        /**
         *.Normal:按钮常规显示状态
         *.Selected:按钮选中显示状态
         *.Highlighted:按钮高亮显示状态
         *.Disabled:按钮关闭状态显示
        **/
        followButton.setTitle("关注", forState: .Normal)
        //设置按钮在特定状态下的文本色值显示
        followButton.setTitleColor(UIColor.whiteColor(), forState: .Normal)
        //设置按钮在特定状态下的图片显示
        followButton.setImage(UIImage(named: "back"), forState: .Normal)
        followButton.setImage(UIImage(named: "select"), forState: .Disabled)
        //设置按钮显示文本的字体大小
        followButton.titleLabel?.font = UIFont.systemFontOfSize(15)
        //设置按钮选中状态
        followButton.selected = true
        //设置按钮是否打开状态
        followButton.enabled = true
        //设置是否响应用户touch事件
        followButton.userInteractionEnabled = true
        //设置按钮的背景颜色
        followButton.backgroundColor = UIColor.grayColor()
        //关闭按钮处于高亮状态图片变暗显示状态
        followButton.adjustsImageWhenHighlighted = false
        //设置按钮图片的内部填充
        followButton.imageEdgeInsets = UIEdgeInsetsMake(10, 10, 10, 10)
        //设置按钮文本的内部填充
        followButton.titleEdgeInsets = UIEdgeInsetsMake(10, 10, 10, 10)
        //为按钮添加点击事件
        followButton.addTarget(self, action: "followAction", forControlEvents: .TouchUpInside)
        view.addSubview(followButton)
</code></pre>

<ul>
<li>按钮点击事件响应方法：</li>
</ul>


<pre><code>    func followAction(sender: UIButton) {
        print("关注")
    }
</code></pre>

<p>3、图片展示视图（UIImageView）：</p>

<pre><code>let imgView = UIImageView(frame: CGRectMake(0, 0, view.frame.size.width, view.frame.size.height))
        //设置图片视图显示图片
        imgView.image = UIImage(named: "exam.png")
        //设置图片视图高亮状态显示图片
        imgView.highlightedImage = UIImage(named: "exam1.png")
        //设置图片视图内容展示模式：常见的几种内容展示模式
        /**
        *.ScaleToFill:缩放图片填满整个图片视图
        *.ScaleAspectFit:缩放内容以适应原图尺寸，没有铺满的地方保持透明
        *.ScaleAspectFill:按钮高亮显示状态
        **/
        imgView.contentMode = .ScaleAspectFit
        //设置图片视图是否高亮显示
        imgView.highlighted = true
        //设置是否响应用户touch事件,默认为false
        imgView.userInteractionEnabled = true
        //播放一组图片
        let img1 = UIImage(named: "play1.png")!
        let img2 = UIImage(named: "play2.png")!
        let img3 = UIImage(named: "play3.png")!
        let images = [img1, img2, img3]
        //设置需要播放的一组图片
        imgView.animationImages = images
        //设置播放持续时间
        imgView.animationDuration = 1
        //设置播放重复次数
        imgView.animationRepeatCount = 20
        //开始播放
        imgView.startAnimating()
        //停止播放
        imgView.stopAnimating()

        view.addSubview(imgView);
</code></pre>

<p>4、文字输入框（UITextField）：</p>

<pre><code>let textField = UITextField(frame: CGRectMake(20, 100, 100,30))
        //设置文本编辑框显示文字
        textField.text = "将编程进行到底"
        //设置文本编辑框占位文字
        textField.placeholder = "客官，你想不想要？"
        //设置文本编辑框的边框显示类型
        textField.borderStyle = .RoundedRect
        //设置文本编辑框的文字字体
        textField.font = UIFont.systemFontOfSize(15)
        //设置文本编辑框的文本颜色
        textField.textColor = UIColor.blackColor()
        //设置文本编辑框输入文本时首字母是否自动大写
        textField.autocapitalizationType = .None
        //设置文本编辑框清除按钮显示模式
        textField.clearButtonMode = .WhileEditing
        //设置文本编辑框的文本对齐方式
        textField.textAlignment = .Center
        //设置文本编辑框返回键显示类型
        textField.returnKeyType = .Search
        //设置是否为安全文本输入状态
        textField.secureTextEntry = true
        //设置输入键盘类型
        textField.keyboardType = .NumberPad
        //设置文本编辑框的代理
        textField.delegate = self
        //唤起键盘，让文本编辑框成为第一响应者
        textField.becomeFirstResponder()
        view.addSubview(textField)
</code></pre>

<ul>
<li>UITextFiled代理方法（UITextFiledDelegate）:</li>
</ul>


<pre><code>//将要开始编辑代理方法,此方法会在键盘弹出之前调用
    func textFieldShouldBeginEditing(textField: UITextField) -&gt; Bool {
        return true
    }

    //已经开始编辑代理方法，此方法会在键盘弹出之后调用
    func textFieldDidBeginEditing(textField: UITextField) {
        print(textField.text)
    }

    //当return按钮被点击时调用
    func textFieldShouldReturn(textField: UITextField) -&gt; Bool {
        //收起键盘，注销文本编辑框为第一响应者
        textField.resignFirstResponder()
        return true
    }

    //将要结束编辑代理方法，此方法会在收起键盘的时候调用
    func textFieldShouldEndEditing(textField: UITextField) -&gt; Bool {
        return true
    }
</code></pre>

<p>5、开关控件（UISwitch）：</p>

<pre><code>        let sliderControl = UISlider(frame: CGRectMake(30, 200, 100, 30))
        //设置滑动条控件最大值
        sliderControl.maximumValue = 10
        //设置滑动条控件最小值
        sliderControl.minimumValue = 1
        //设置滑动条控件初始值
        sliderControl.value = 5
        //设置滑动条控件最大值方向颜色显示
        sliderControl.maximumTrackTintColor = UIColor.redColor()
        //设置滑动条控件最小值方向颜色显示
        sliderControl.minimumTrackTintColor = UIColor.brownColor()
        //设置滑动条控件拖动按钮颜色
        sliderControl.thumbTintColor = UIColor.blueColor()
        //设置滑动条控件最大值方向图片显示：正常状态
        sliderControl.setMaximumTrackImage(UIImage(named: "slidermax.png"), forState: .Normal)
        //设置滑动条控件最小值方向图片显示：正常状态
        sliderControl.setMinimumTrackImage(UIImage(named: "slidermin.png"), forState: .Normal)
        //设置滑动条控件拖动按钮显示图片：正常状态
        sliderControl.setThumbImage(UIImage(named: "thumb.png"), forState: .Normal)
        //为滑动条控件添加：值改变触发事件
        sliderControl.addTarget(self, action: "sliderAction:", forControlEvents: .ValueChanged)
        view.addSubview(sliderControl)
</code></pre>

<ul>
<li>开关值改变事件响应方法：</li>
</ul>


<pre><code>func sliderAction(sliderControl: UISlider) {
        print("the slider value is \(sliderControl.value)")
    }
</code></pre>

<p>6、加载指示器视图（UIActivityIndicatorView）：</p>

<pre><code>let activityControl = UIActivityIndicatorView(frame: CGRectMake(100, 200, 30, 30))
        //设置加载指示器视图的风格
        activityControl.activityIndicatorViewStyle = .Gray
        //设置加载指示器视图的背景颜色
        activityControl.backgroundColor = UIColor.redColor()
        //开始动画
        activityControl.startAnimating()
        //停止动画
        activityControl.stopAnimating()
        view.addSubview(activityControl)
</code></pre>

<p>7、分段控件视图（UISegmentedControl）:</p>

<pre><code>let items = ["全部", "电影", "新闻", "科技"]
        let segmentedControl = UISegmentedControl(items: items)
        segmentedControl.frame = CGRectMake(30, 200, 180, 30)
        //设置分段控件颜色
        segmentedControl.tintColor = UIColor.redColor()
        //设置分段控件默认选中索引
        segmentedControl.selectedSegmentIndex = 1
        //为分段控件添加值改变响应事件
        segmentedControl.addTarget(self, action: "segmentControlAction:", forControlEvents: .ValueChanged)
        view.addSubview(segmentedControl)
</code></pre>

<ul>
<li>分段控件值改变事件响应方法：</li>
</ul>


<pre><code>func segmentControlAction(segmentedControl: UISegmentedControl) {
        if segmentedControl.selectedSegmentIndex == 0 {

        } else if segmentedControl.selectedSegmentIndex == 1 {

        } else if segmentedControl.selectedSegmentIndex == 2{

        } else {

        }
       print("the segmented Control selected Index is \(segmentedControl.selectedSegmentIndex)")
    }
</code></pre>

<p>8、页面控件（UIPageControl）：</p>

<pre><code>let pageControl = UIPageControl(frame: CGRectMake(30, 200, 180, 30))
        //设置页面控件的背景颜色
        pageControl.backgroundColor = UIColor.brownColor()
        //设置总页数
        pageControl.numberOfPages = 4
        //设置当前页数
        pageControl.currentPage = 1
        //设置页面控件指示器颜色
        pageControl.pageIndicatorTintColor = UIColor.redColor()
        //设置页面控件当前页面指示器颜色
        pageControl.currentPageIndicatorTintColor = UIColor.blueColor()
        //添加页面控件点击响应事件
        pageControl.addTarget(self, action: "changeAction:", forControlEvents: .TouchUpInside)
        view.addSubview(pageControl)
</code></pre>

<ul>
<li>页面控件点击响应事件：</li>
</ul>


<pre><code>func changeAction(pageControl: UIPageControl) {   
  print("the current select page is :\(pageControl.currentPage)")
}
</code></pre>

<p>9、警告视图控制器（UIAlertController）：(UIAlertView 与 UIActionSheet在iOS8.0之后就弃用了，推荐使用UIAlertController)</p>

<pre><code>        /**
         * .Alert
         * .ActionSheet
         */
        let alertCtrl = UIAlertController(title: "提示信息", message: "确定返回吗？", preferredStyle: .Alert)
        //初始化警告动作
        let cancelAction = UIAlertAction(title: "取消", style: .Cancel) { (action) -&gt; Void in
            //...
            //添加相应处理代码
            //...
            //把UIAlertController从父视图控制器中移除，防止内存泄漏
            alertCtrl.removeFromParentViewController()
        }
        let okAction = UIAlertAction(title: "立即返回", style: .Default) { (action) -&gt; Void in
            //...
            //添加相应处理代码
            //...
            //把UIAlertController从父视图控制器中移除，防止内存泄漏
            alertCtrl.removeFromParentViewController()
        }
        //添加动作
        alertCtrl.addAction(cancelAction)
        alertCtrl.addAction(okAction)
        //弹出警告视图控制器
        self.presentViewController(alertCtrl, animated: true, completion: nil)
</code></pre>

<p>10、 进度条视图（UIProgressView）：</p>

<pre><code>     let progressView = UIProgressView(progressViewStyle: .Bar)
        progressView.frame = CGRectMake(30, 200, 180, 30)
        //设置默认进度
        progressView.progress = 0.3
        //设置进度条加载过的颜色
        progressView.progressTintColor = UIColor.redColor()
        //设置进度条未加载过的颜色
        progressView.trackTintColor = UIColor.blueColor()
        //设置进度条加载过的图片展示
        progressView.progressImage = UIImage(named: "progress.png")
        //设置进度条未加载过的图片展示
        progressView.trackImage = UIImage(named: "track.png")
        view.addSubview(progressView)
</code></pre>

<p>11、 工具条控件（UIToolBar）：</p>

<pre><code>        let toolBar = UIToolbar(frame: CGRectMake(30, 200, 180, 49))
        //设置工具条展示风格
        toolBar.barStyle = .Default
        //添加工具条按钮
        let item = UIBarButtonItem(barButtonSystemItem: .Done, target: self, action: "itemButtonAction")
        let item1 = UIBarButtonItem(barButtonSystemItem: .Edit, target: self, action: "itemButtonAction")
        //固定间距工具条按钮
        let item2 = UIBarButtonItem(barButtonSystemItem: .FixedSpace, target: self, action: "itemButtonAction")
        item2.width = 30
        let customButton = UIButton(type: .DetailDisclosure)
        customButton.addTarget(self, action: "itemButtonAction", forControlEvents: .TouchUpInside)
        //自定义按钮为工具条按钮
        let item3 = UIBarButtonItem(customView: customButton)
        let items = [item, item1, item2, item3]
        //设置工具条要显示的所有按钮
        toolBar.items = items
        view.addSubview(toolBar)
</code></pre>

<ul>
<li>工具条按钮点击响应事件：</li>
</ul>


<pre><code>func itemButtonAction() {
        print("tool bar button")
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift语言编程]]></title>
    <link href="http://yangshebing.github.io/blog/2015/09/12/swift/"/>
    <updated>2015-09-12T12:53:21+08:00</updated>
    <id>http://yangshebing.github.io/blog/2015/09/12/swift</id>
    <content type="html"><![CDATA[<h4>Swift语言基础学习</h4>

<ul>
<li>导入系统类库头文件（swift中称之为模块）</li>
</ul>


<p><code>
import UIKit
</code></p>

<ul>
<li>定义一个常量</li>
</ul>


<p><code>
let a = 5
</code></p>

<ul>
<li>定义一个变量</li>
</ul>


<p><code>
var str = "Hello, World!"
</code></p>

<ul>
<li>swift中打印输出</li>
</ul>


<p><code>
print("Hi,Girl!");
</code></p>

<p><strong>注意事项：如果在一行内想要写多条语句时需要用分号隔开，一行内写一句代码分号可加可不加（不推荐加）</strong></p>

<!--more-->


<p><code>
//一行内多句代码
let dog = "ddd";print(dog)
</code></p>

<pre><code>//一行内一句代码
let my = "我的"
let age = 20
let sex = "male"
print(my)
print(age)
print(sex)
</code></pre>

<ul>
<li>一次性定义多个变量</li>
</ul>


<p><code>
var a = 0.0, b = 0.0, c = 0.0
</code></p>

<ul>
<li>定义变量并赋初值</li>
</ul>


<pre><code>var a : Float = 5;
var userName = "yangshebing"
</code></pre>

<ul>
<li>字符串插值方式：相当于占位符输出</li>
</ul>


<p><code>
print("the user name is \(userName)”)
</code></p>

<ul>
<li>定义一个指定类型的变量</li>
</ul>


<pre><code>var name : String
name = "yangshebing";
print(name);
</code></pre>

<p><strong>注意：在Swift中支持多行注释嵌套</strong></p>

<ul>
<li>定义一个数组</li>
</ul>


<p>最简单粗暴的方法：</p>

<p><code>
let array = ["a", "b", "c"]
</code></p>

<p>常规写法：</p>

<pre><code>let array1: [String] = ["A", "B", "C"]
let array2: Array&lt;String&gt; = ["A", "B", "D”]
</code></pre>

<ul>
<li>整数和浮点数之间转换</li>
</ul>


<pre><code>let num = 3
let pointNum = 0.14159
let pi = Double(num) + pointNum
let numPi = Int(pi)
//Float转换成Int类型时，实型值总是会被缩短，意味着4.75将会变成4, -3.9将会变成-3
print(numPi)
</code></pre>

<ul>
<li>自定义类型别名</li>
</ul>


<pre><code>typealias MyIntType = Int
let num : MyIntType = 10
</code></pre>

<ul>
<li>布尔</li>
</ul>


<p>Swift 有一个基本布尔类型，称之为Bool。它提供了两个布尔常量值:true和false</p>

<pre><code>let isMore = true
let isRainy = false
</code></pre>

<ul>
<li>布尔类型在if语句中的使用</li>
</ul>


<pre><code>let isApple = true
if isApple {
    println("this is Apple")
}
</code></pre>

<p><strong>使用布尔类型应当注意事项：Swift的类型安全机制会防止non-Boolean代替Bool值，比如下面的代码就会报编译时错误：</strong></p>

<pre><code>let num = 1
if num {
    //这个例子编译的时候会报错，但是在Objective-C语言中不会。
}
</code></pre>

<p>正确使用的方式如下：</p>

<pre><code>let number = 1
if number == 1 {
    println("this is one")
    //这个编译成功
}
</code></pre>

<p>另外，这里提一下：在Swift中判断两个对象是否相等是使用”===“”!=="</p>

<ul>
<li>Swift中元组的使用</li>
</ul>


<pre><code>//定义一个元组
let salaryCombination = （10000, "one month"）
//它代表的是一个（Int, String）类型的元组
</code></pre>

<pre><code>//分解元组
let (salary, month) = salaryCombination
print("The salary is \(salary)")
print("The month is \(month)")
//你如果只需要元组的一部分值，你也可以这样写
let (salary,_)
print(the salary is \(salary))
</code></pre>

<ul>
<li>元组取值方式总结</li>
</ul>


<pre><code>方式一
let firstSalary = (10000, "one month")
let (salary1,month1) = firstSalary
let secondSalary = (20000,"two month")
let (salary2, month2) = secondSalary
print("一月收入month1: \(salary1)")
print("二月收入month2: \(salary2)”)

//方式二
let firstSalary = (10000, "one month")
let (salary1,month1) = firstSalary
let secondSalary = (20000,"two month")
let (salary2, month2) = secondSalary
//输出元组中的第0个元素， firstSalary.0：firstSalary代表元组名，0代表下标
print("一月的收入month1: \(firstSalary.0)")
print("二月的收入month2: \(secondSalary.0)”)

//方式三
let firstSalary = (salary : 10000,month : "one month")
let (salary1,month1) = firstSalary
let secondSalary = (salary :20000,month : "two month")
let (salary2, month2) = secondSalary
//输出元组中的第0个元素， firstSalary.salary：firstSalary代表元组名，salary代表元组元素的名字
print("一月的收入month1: \(firstSalary.salary)")
print("二月的收入month2: \(secondSalary.salary)")
</code></pre>

<h4>本文参考文章资料：</h4>

<ul>
<li>《The Swift Programming Language》</li>
</ul>


<p><strong>欢迎共同学习进步，本着分享的精神，只是为了让你学习起来更加轻松。</strong></p>

<p><strong>如需转载，请注明出处</strong></p>
]]></content>
  </entry>
  
</feed>
